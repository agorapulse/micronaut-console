/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2023 Agorapulse.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// tag::import-runtime[]
// import com.amazonaws.services.lambda.model.InvocationType
// import com.amazonaws.services.lambda.model.Runtime
// end::import-runtime[]
// tag::import-sts[]
//import com.amazonaws.services.securitytoken.AWSSecurityTokenService
//import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClient
//import com.amazonaws.services.securitytoken.model.GetCallerIdentityRequest
// import com.amazonaws.services.securitytoken.model.GetCallerIdentityResult
// end::import-sts[]
// tag::import[]
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
//import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
//import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

// end::import[]

/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 Agorapulse.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
//    id "com.github.johnrengelman.shadow" version "5.0.0"
//    id "jp.classmethod.aws.lambda" version "0.39"
//    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
    id "groovy"
    id 'micronaut-compatibility'
}

config {
    publishing {
        enabled = false
    }
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation project(':micronaut-console')
    implementation 'org.codehaus.groovy:groovy'

    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation micronautMigratedDependency("micronaut-function-aws")
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut:micronaut-function-client"
    testImplementation "io.micronaut:micronaut-inject-java"

    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
}

test.classpath += configurations.developmentOnly
//
//shadowJar {
//    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
//}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

//shadowJar {
//    mergeServiceFiles()
//    mergeGroovyExtensionModules()
//}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
mainClassName = "micronaut.console.example.function.MicronautConsoleExampleFunctionFunction"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}


/*
// tag::tasks[]
task deploySandbox(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
    functionName = "MicronautConsoleSandbox"
    handler = "com.agorapulse.micronaut.console.function.ConsoleHandler::apply"
    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
    runtime = Runtime.Java8
    zipFile = shadowJar.archivePath
    memorySize = 512
    timeout = 60
}

task invokeSandbox(type: AWSLambdaInvokeTask) {
    File scriptFile = file(project.hasProperty('script.file') ? project.getProperty('script.file') : 'src/test/resources/scripts/hello.sandbox.groovy')

    functionName = 'MicronautConsoleSandbox'
    invocationType = InvocationType.RequestResponse
    payload = JsonOutput.toJson(scriptFile.text)

    doLast {
        println "\nLambda function result:\n"
        println new JsonSlurper().parseText(new String(invokeResult.payload.array(), "UTF-8"))
        println()
    }
}
// end::tasks[]
*/
//
//// tag::auth[]
//task deploySandbox(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
//    functionName = "MicronautConsoleSandbox"
//    handler = "com.agorapulse.micronaut.console.function.AuthConsoleHandler::apply"
//    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
//    runtime = Runtime.Java8
//    zipFile = shadowJar.archivePath
//    memorySize = 512
//    timeout = 60
//}
//
//task invokeSandbox(type: AWSLambdaInvokeTask) {
//    File scriptFile = file(project.hasProperty('script.file') ? project.getProperty('script.file') : 'src/test/resources/scripts/hello.sandbox.groovy')
//
//    Map<String, String> user = [:]
//    try {
//        AWSSecurityTokenService sts = aws.createClient(AWSSecurityTokenServiceClient.class, aws.profileName);
//        sts.region = aws.getActiveRegion(aws.region)
//        GetCallerIdentityResult identity = sts.getCallerIdentity(new GetCallerIdentityRequest())
//        user.id = identity.arn
//        user.name = identity.userId
//        user.address = '/' + new URL('http://checkip.amazonaws.com/').text
//    } catch (Exception ignored) {
//        logger.info("AWS not configured")
//    }
//
//
//    functionName = 'MicronautConsoleSandbox'
//    invocationType = InvocationType.RequestResponse
//    payload = JsonOutput.toJson(
//        body: scriptFile.text,
//        user: user
//    )
//
//    doLast {
//        println "\nLambda function result:\n"
//        println new JsonSlurper().parseText(new String(invokeResult.payload.array(), "UTF-8"))
//        println()
//    }
//}
//// end::auth[]

